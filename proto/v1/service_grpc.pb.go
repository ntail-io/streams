// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0
// source: v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	Append(ctx context.Context, opts ...grpc.CallOption) (GatewayService_AppendClient, error)
	Tail(ctx context.Context, opts ...grpc.CallOption) (GatewayService_TailClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Append(ctx context.Context, opts ...grpc.CallOption) (GatewayService_AppendClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[0], "/ntail.streams.v1.GatewayService/Append", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceAppendClient{stream}
	return x, nil
}

type GatewayService_AppendClient interface {
	Send(*AppendRequest) error
	Recv() (*AppendResponse, error)
	grpc.ClientStream
}

type gatewayServiceAppendClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceAppendClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayServiceAppendClient) Recv() (*AppendResponse, error) {
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) Tail(ctx context.Context, opts ...grpc.CallOption) (GatewayService_TailClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[1], "/ntail.streams.v1.GatewayService/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceTailClient{stream}
	return x, nil
}

type GatewayService_TailClient interface {
	Send(*TailRequest) error
	Recv() (*TailResponse, error)
	grpc.ClientStream
}

type gatewayServiceTailClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceTailClient) Send(m *TailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayServiceTailClient) Recv() (*TailResponse, error) {
	m := new(TailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.GatewayService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.GatewayService/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.GatewayService/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.GatewayService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.GatewayService/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	Append(GatewayService_AppendServer) error
	Tail(GatewayService_TailServer) error
	Get(context.Context, *GetRequest) (*GetResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*emptypb.Empty, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*emptypb.Empty, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) Append(GatewayService_AppendServer) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedGatewayServiceServer) Tail(GatewayService_TailServer) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedGatewayServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGatewayServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedGatewayServiceServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedGatewayServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedGatewayServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServiceServer).Append(&gatewayServiceAppendServer{stream})
}

type GatewayService_AppendServer interface {
	Send(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type gatewayServiceAppendServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceAppendServer) Send(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayServiceAppendServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GatewayService_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServiceServer).Tail(&gatewayServiceTailServer{stream})
}

type GatewayService_TailServer interface {
	Send(*TailResponse) error
	Recv() (*TailRequest, error)
	grpc.ServerStream
}

type gatewayServiceTailServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceTailServer) Send(m *TailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayServiceTailServer) Recv() (*TailRequest, error) {
	m := new(TailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GatewayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.GatewayService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.GatewayService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.GatewayService/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.GatewayService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.GatewayService/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ntail.streams.v1.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GatewayService_Get_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _GatewayService_CreateTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _GatewayService_ListTopics_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _GatewayService_CreateSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _GatewayService_ListSubscriptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Append",
			Handler:       _GatewayService_Append_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _GatewayService_Tail_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/service.proto",
}

// BufferServiceClient is the client API for BufferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BufferServiceClient interface {
	Append(ctx context.Context, opts ...grpc.CallOption) (BufferService_AppendClient, error)
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type bufferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBufferServiceClient(cc grpc.ClientConnInterface) BufferServiceClient {
	return &bufferServiceClient{cc}
}

func (c *bufferServiceClient) Append(ctx context.Context, opts ...grpc.CallOption) (BufferService_AppendClient, error) {
	stream, err := c.cc.NewStream(ctx, &BufferService_ServiceDesc.Streams[0], "/ntail.streams.v1.BufferService/Append", opts...)
	if err != nil {
		return nil, err
	}
	x := &bufferServiceAppendClient{stream}
	return x, nil
}

type BufferService_AppendClient interface {
	Send(*AppendRequest) error
	Recv() (*AppendResponse, error)
	grpc.ClientStream
}

type bufferServiceAppendClient struct {
	grpc.ClientStream
}

func (x *bufferServiceAppendClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bufferServiceAppendClient) Recv() (*AppendResponse, error) {
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bufferServiceClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.BufferService/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bufferServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/ntail.streams.v1.BufferService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BufferServiceServer is the server API for BufferService service.
// All implementations must embed UnimplementedBufferServiceServer
// for forward compatibility
type BufferServiceServer interface {
	Append(BufferService_AppendServer) error
	Poll(context.Context, *PollRequest) (*PollResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedBufferServiceServer()
}

// UnimplementedBufferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBufferServiceServer struct {
}

func (UnimplementedBufferServiceServer) Append(BufferService_AppendServer) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedBufferServiceServer) Poll(context.Context, *PollRequest) (*PollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (UnimplementedBufferServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBufferServiceServer) mustEmbedUnimplementedBufferServiceServer() {}

// UnsafeBufferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BufferServiceServer will
// result in compilation errors.
type UnsafeBufferServiceServer interface {
	mustEmbedUnimplementedBufferServiceServer()
}

func RegisterBufferServiceServer(s grpc.ServiceRegistrar, srv BufferServiceServer) {
	s.RegisterService(&BufferService_ServiceDesc, srv)
}

func _BufferService_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BufferServiceServer).Append(&bufferServiceAppendServer{stream})
}

type BufferService_AppendServer interface {
	Send(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type bufferServiceAppendServer struct {
	grpc.ServerStream
}

func (x *bufferServiceAppendServer) Send(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bufferServiceAppendServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BufferService_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BufferServiceServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.BufferService/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BufferServiceServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BufferService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BufferServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntail.streams.v1.BufferService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BufferServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BufferService_ServiceDesc is the grpc.ServiceDesc for BufferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BufferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ntail.streams.v1.BufferService",
	HandlerType: (*BufferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poll",
			Handler:    _BufferService_Poll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BufferService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Append",
			Handler:       _BufferService_Append_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/service.proto",
}
